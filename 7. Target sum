class Solution {
    public int findTargetSumWays(int[] nums, int target) {
       int sum = 0;
       for(int i = 0; i<nums.length; i++){
           sum += nums[i];
       } 
       if( sum < target || sum + target < 0 ||  (sum  + target) %2 != 0 )
         return 0;
       int diff = (sum + target)/2;
       return subset(nums, diff);
    }
    public static int subset(int[] nums, int sum){
        int[][] t = new int[nums.length+1][sum+1];
        for(int i=0; i< nums.length+1; i++){
            for(int j=0; j<sum+1; j++){
                if(i==0){
                    t[i][j] = 0;
                }
                if(j==0){
                    t[i][j] = 1;
                }
            }
        }
        for(int i=1; i< nums.length+1; i++){
            for(int j=0; j<sum+1; j++){// usually we start j=1 but here to counter zero we initialize it with j=0
                if(nums[i-1] <= j){
                    t[i][j] = t[i-1][j-nums[i-1]] + t[i-1][j];
                }
                else
                t[i][j] = t[i-1][j];
            }
        }
        return t[nums.length][sum];
	}
}
